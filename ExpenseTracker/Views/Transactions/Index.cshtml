@model TransactionsViewModel
@using ExpenseTracker.Models.Enums
@using ExpenseTracker.Models.ViewModels

@{
    ViewData["Title"] = "Transactions";
    var selectedType = Model.SelectedType;
}

<h1>@ViewData["Title"]</h1>

@Html.AntiForgeryToken()

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row">
    <div class="col-md-3">
        <h4>Filters</h4>
        <form method="get">
            <!-- Transaction Type -->
            <div class="mb-3">
                <label for="type" class="form-label">Transaction Type</label>
                <select id="type" name="type" class="form-select" asp-items="@(ViewBag.TransactionTypes)">
                </select>
            </div>

            <!-- Category -->
            <div class="mb-3">
                <label for="category" class="form-label">Category</label>
                <select id="category" name="categoryId" class="form-select"
                        asp-items="@(new SelectList(Model.Categories, "Id", "Name", Model.SelectedCategoryId))">
                    <option value="">All</option>
                </select>
            </div>

            <!-- Start Date -->
            <div class="mb-3">
                <label for="startDate" class="form-label">Start Date</label>
                <input type="date" id="startDate" name="startDate" value="@(Model.StartDate?.ToString("yyyy-MM-dd"))" class="form-control" />
            </div>

            <!-- End Date -->
            <div class="mb-3">
                <label for="endDate" class="form-label">End Date</label>
                <input type="date" id="endDate" name="endDate" value="@(Model.EndDate?.ToString("yyyy-MM-dd"))" class="form-control" />
            </div>

            <button type="submit" class="btn btn-primary">Apply Filters</button>
        </form>
    </div>

    <div class="col-md-9">
        <h4 class="d-flex justify-content-between align-items-center">
            @(selectedType == TransactionType.Expense ? "Expenses" : "Income")

            <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#addTransactionModal">
                + Add Transaction
            </button>
        </h4>

        @{
            var addTransactionViewModel = new AddTransactionViewModel 
            {
                Transaction = new Transaction { TransactionType = selectedType },
                Categories = Model.Categories
            };
        }
        @await Html.PartialAsync("_AddTransactionModal", addTransactionViewModel)

        <table class="table table-striped">
            <thead>
                <tr>
                    <th>
                        <a href="@Url.Action("Index", new {
                            type = Model.SelectedType,
                            categoryId = Model.SelectedCategoryId,
                            startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                            endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                            page = Model.PageNumber,
                            sortColumn = "Date",
                            sortOrder = Model.SortColumn == "Date" && Model.SortOrder == "asc" ? "desc" : "asc"
                        })">
                            Date @(Model.SortColumn == "Date" ? (Model.SortOrder == "asc" ? "↑" : "↓") : "")
                        </a>
                    </th>
                    <th>Category</th>
                    <th>Description</th>
                    <th>
                        <a href="@Url.Action("Index", new {
                            type = Model.SelectedType,
                            categoryId = Model.SelectedCategoryId,
                            startDate = Model.StartDate?.ToString("yyyy-MM-dd"),
                            endDate = Model.EndDate?.ToString("yyyy-MM-dd"),
                            page = Model.PageNumber,
                            sortColumn = "Amount",
                            sortOrder = Model.SortColumn == "Amount" && Model.SortOrder == "asc" ? "desc" : "asc"
                        })">
                            Amount @(Model.SortColumn == "Amount" ? (Model.SortOrder == "asc" ? "↑" : "↓") : "")
                        </a>
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>

            <tbody id="transactionsTableBody">
                @foreach (var t in Model.Transactions)
                {
                    <tr id="transaction-row-@t.Id">
                        <td>@t.Date.ToString("yyyy-MM-dd")</td>
                        <td>@t.Category.Name</td>
                        <td>@t.Description</td>
                        <td>@t.Amount.ToString("C")</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-1" 
                                    onclick="editTransaction(@t.Id)"
                                    title="Edit">
                                ✏️
                            </button>
                            
                            <button class="btn btn-sm btn-outline-danger" 
                                    onclick="deleteTransaction(@t.Id)"
                                    title="Delete">
                                🗑️
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <nav aria-label="Page navigation">
            <ul class="pagination">
                @for (int i = 1; i <= Math.Ceiling(Model.TotalCount / (double)Model.PageSize); i++)
                {
                    <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                        <a class="page-link" href="?type=@selectedType&page=@i@(Model.SelectedCategoryId.HasValue ? "&categoryId=" + Model.SelectedCategoryId : "")@(Model.StartDate.HasValue ? "&startDate=" + Model.StartDate.Value.ToString("yyyy-MM-dd") : "")@(Model.EndDate.HasValue ? "&endDate=" + Model.EndDate.Value.ToString("yyyy-MM-dd") : "")">
                            @i
                        </a>
                    </li>
                }
            </ul>
        </nav>
    </div>
</div>

<!-- Edit Transaction Modal Container -->
<div id="editModalContainer"></div>

@section Scripts {
    <script>
        async function editTransaction(transactionId) {
            try {
                const response = await fetch(`/Transactions/Edit/${transactionId}`);
                if (response.ok) {
                    const html = await response.text();
                    document.getElementById('editModalContainer').innerHTML = html;
                    
                    const editModal = new bootstrap.Modal(document.getElementById('editTransactionModal'));
                    editModal.show();
                } else {
                    alert('Error loading transaction details');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Error loading transaction details');
            }
        }

        // Delete Transaction function
        function deleteTransaction(transactionId) {
            if (confirm('Are you sure you want to delete this transaction?')) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                fetch(`/Transactions/Delete/${transactionId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const row = document.getElementById(`transaction-row-${transactionId}`);
                        if (row) {
                            row.remove();
                        }
                        
                        alert('Transaction deleted successfully');
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting transaction');
                });
            }
        }
    </script>
}