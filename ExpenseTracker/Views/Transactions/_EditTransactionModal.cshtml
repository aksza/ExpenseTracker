@model ExpenseTracker.Models.ViewModels.AddTransactionViewModel

<div class="modal fade" id="editTransactionModal" tabindex="-1" aria-labelledby="editTransactionModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTransactionModalLabel">Edit Transaction</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="editTransactionForm" asp-action="Edit" method="post">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="Transaction.Id" value="@Model.Transaction.Id" />
                    <input type="hidden" name="Transaction.TransactionType" value="@Model.Transaction.TransactionType" />

                    <div class="mb-3">
                        <label class="form-label">Category</label>
                        <input type="text" id="editCategoryInput" name="CategoryName" class="form-control"
                               placeholder="Select or type a new category..."
                               list="editCategoriesList"
                               autocomplete="off"
                               value="@Model.Transaction.Category?.Name" />

                        <input type="hidden" id="editCategoryIdHidden" name="CategoryId" value="@Model.CategoryId" />

                        <datalist id="editCategoriesList">
                            @foreach (var c in Model.Categories)
                            {
                                <option value="@c.Name" data-id="@c.Id">@c.Name</option>
                            }
                        </datalist>

                        <small class="text-muted">Start typing to search existing categories or enter a new one.</small>
                    </div>

                    <!-- Amount -->
                    <div class="mb-3">
                        <label class="form-label">Amount</label>
                        <input type="number" step="0.01" name="Transaction.Amount" class="form-control"
                               value="@Model.Transaction.Amount" required />
                    </div>

                    <!-- Date -->
                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <input type="date" name="Transaction.Date" class="form-control"
                               value="@Model.Transaction.Date.ToString("yyyy-MM-dd")" required />
                    </div>

                    <!-- Description -->
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <textarea name="Transaction.Description" class="form-control">@Model.Transaction.Description</textarea>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Update</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const editCategoryInput = document.getElementById("editCategoryInput");
        const editCategoryIdHidden = document.getElementById("editCategoryIdHidden");
        const editCategoriesList = document.getElementById("editCategoriesList");
        const editForm = document.getElementById("editTransactionForm");

        if (editCategoryInput && editCategoryIdHidden && editCategoriesList && editForm) {
            editCategoryInput.addEventListener("input", function () {
                const inputValue = editCategoryInput.value;
                const options = editCategoriesList.querySelectorAll('option');
                let foundMatch = false;

                options.forEach(option => {
                    if (option.value === inputValue) {
                        editCategoryIdHidden.value = option.getAttribute('data-id');
                        foundMatch = true;
                    }
                });

                if (!foundMatch) {
                    editCategoryIdHidden.value = "";
                }
            });

            editForm.addEventListener("submit", function (e) {
                const categoryName = editCategoryInput.value.trim();

                if (!categoryName) {
                    e.preventDefault();
                    alert("Please select or enter a category name.");
                    return false;
                }

                const submitBtn = editForm.querySelector('button[type="submit"]');
                submitBtn.disabled = true;
                submitBtn.textContent = 'Updating...';

                if (!editCategoryIdHidden.value) {
                    const newCategoryInput = document.createElement('input');
                    newCategoryInput.type = 'hidden';
                    newCategoryInput.name = 'NewCategoryName';
                    newCategoryInput.value = categoryName;
                    editForm.appendChild(newCategoryInput);
                }

                return true;
            });

            document.getElementById('editTransactionModal').addEventListener('show.bs.modal', function () {
                const submitBtn = document.querySelector('#editTransactionForm button[type="submit"]');
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.textContent = 'Update';
                }
            });
        }
    });
</script>